{
package parser

import (
    "github.com/jacobsimpson/jt/ast"
)

// A common desire is to extract a string from labeled expression.
// https://pkg.go.dev/github.com/PuerkitoBio/pigeon#hdr-Labeled_expression
// There a specific rules that describe how a matching expression will be
// turned into a sequence of nested []interface{}. In practice, I don't care, I
// just want a simple byte sequence that can be mapped to a string. This method
// will flatten arbitrarily deeply nested []interface{} containing various
// lengths of byte sequences into a simple []byte.
func flatten(v interface{}) []byte {
    if v, ok := v.([]byte); ok {
        return v
    }

    result := []byte{}
    for _, i := range v.([]interface{}) {
        switch t := i.(type) {
        case []byte:
            result = append(result, t...)
        case []interface{}:
            result = append(result, flatten(i)...)
        }
    }
    return result
}

}

program = rule:rule {
    return &ast.Program{
        []*ast.Rule{
            rule.(*ast.Rule),
        },
    }, nil
}

rule = rule:(block_rule / no_block_rule) {
    return rule, nil
}

block_rule = _ expression:boolean_expression _ '{' _ identifier:identifier _ '(' _ column:column_identifier _ ')' _ '}' _EOL {
    return &ast.Rule{
        Selection: expression.(ast.Expression),
        Block:     &ast.Block{
		    []*ast.Command{
                &ast.Command{
                    identifier.(string),
                    []ast.Expression{column.(ast.Expression)},
                },
            },
	    },
    }, nil
}

identifier = [a-zA-Z][a-zA-Z0-9]* {
    return string(c.text), nil
}

no_block_rule = _ expression:boolean_expression _EOL {
    return &ast.Rule{
        Selection: expression.(ast.Expression),
        Block:     ast.NewPrintlnBlock(),
    }, nil
}

boolean_expression = _ expression:(operator_first_boolean_expression / full_boolean_expression / single_term_boolean_expression) {
    return expression, nil
}

operator_first_boolean_expression = comparison:comparison term:term {
    return &ast.Comparison{
        Left:     ast.NewVarValue("%0"),
        Operator: comparison.(ast.Operator),
        Right:    term.(ast.Value),
    }, nil
}

single_term_boolean_expression = term:term {
    return &ast.Comparison{
        Left:     ast.NewVarValue("%0"),
        Operator: ast.EQ_Operator,
        Right:    term.(ast.Value),
    }, nil
}

full_boolean_expression = lhs:term _ comparison:comparison _ rhs:term {
    return &ast.Comparison{
        Left:     lhs.(ast.Value),
        Operator: comparison.(ast.Operator),
        Right:    rhs.(ast.Value),
    }, nil
}

term = identifier:(column_identifier / date / decimal / integer / regular_expression) { return identifier, nil }

column_identifier = identifier:('%' [0-9]+) rng:range_expression? {
    if rng == nil {
        return ast.NewVarValue(string(flatten(identifier))), nil
    }

    r := rng.(*ast.RangeExpression)
    r.Expression = ast.NewVarValue(string(flatten(identifier)))
    return r, nil
}

range_expression = '[' start:('-' [0-9]+ / [0-9]*) ':' end:('-' [0-9]+ / [0-9]*) ']' {
    var si, ei *int
    if s := string(flatten(start)); len(s) > 0 {
        i64, err := strconv.ParseInt(s, 10, 32)
        if err != nil { return nil, err }
        i := int(i64)
        si = &i
    }
    if s := string(flatten(end)); len(s) > 0 {
        i64, err := strconv.ParseInt(s, 10, 32)
        if err != nil { return nil, err }
        i := int(i64)
        ei = &i
    }

    return &ast.RangeExpression{
        Start: si,
        End:   ei,
    }, nil
}

regular_expression = ('/' [^/]* '/' / '|' [^|]* '|') {
    s := string(c.text)
	return ast.NewRegexpValue(s[1:len(s)-1])
}

date        = [0-9][0-9][0-9][0-9] '-' [0-9][0-9] '-' [0-9][0-9] 'T' {
    return ast.NewDateTimeValue(string(c.text))
}

decimal     = [0-9]+ '.' [0-9]* { return ast.NewDoubleFromString(string(c.text)) }

integer     = integer:(binary_int / octal_int / hex_int / decimal_int) { return integer, nil }
binary_int  = [+-]? "0b" [0-1_]+    { return ast.NewIntegerValueFromBinaryString(string(c.text)) }
octal_int   = [+-]? "0o" [0-7]+     { return ast.NewIntegerValueFromOctalString(string(c.text))}
hex_int     = [+-]? "0x" [0-9A-F_]+ { return ast.NewIntegerValueFromHexString(string(c.text)) }
decimal_int = [+-]? [0-9_]+         { return ast.NewIntegerValueFromDecString(string(c.text)) }

comparison = comparison:(le / lt / eq / ne / ge / gt) { return comparison, nil }
lt = '<'  { return ast.LT_Operator, nil }
le = "<=" { return ast.LE_Operator, nil }
eq = "==" { return ast.EQ_Operator, nil }
ne = "!=" { return ast.NE_Operator, nil }
ge = ">=" { return ast.GE_Operator, nil }
gt = '>'  { return ast.GT_Operator, nil }

// The whitespace rule is used to capture whitespace. Most grammars that I
// build are not whitespace sensitive, so the results of matching this will
// normally be discarded somehow.
_ "whitespace" <- [ \n\t\r]*

// Using the whitespace rule before an EOL means the _ rule will consume the
// EOL characters, and the EOL won't be available to match.
_EOL "whitespaceEOL" = [ \t]* EOL

// Windows             - Lines end with both a <CR> (\r) followed by a <LF> (/n) character
// Linux               - Lines end with only a <LF> (\n) character
// Macintosh (Mac OSX) - Lines end with only a <LF> (\n) character
// Macintosh (old)     - Lines end with only a <CR> (\r) character
// The line might be the last line in the file, so EOF is a valid EOL too.
EOL = [\n\r] / "\r\n" / EOF

// An EOF character is anything that is not a character.
EOF = !.
